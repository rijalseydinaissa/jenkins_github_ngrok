pipeline {
    agent any

    environment {
        // Variables pour ngrok
        NGROK_TOKEN = credentials('ngrok-token')
        APP_PORT = '8080'

        // Variables Docker
        DOCKER_IMAGE = "mon-app-java:${BUILD_NUMBER}"
        CONTAINER_NAME = "mon-app-container"
    }

    stages {
        stage('üîß Environment Setup') {
            steps {
                echo 'üîß Configuration de l\'environnement...'
                script {
                    // V√©rifier Docker
                    try {
                        sh 'docker --version'
                        sh 'docker ps'
                        echo '‚úÖ Docker accessible'
                    } catch (Exception e) {
                        error '‚ùå Docker non accessible: ' + e.getMessage()
                    }

                    // V√©rifier Java
                    try {
                        sh 'java -version'
                        echo '‚úÖ Java accessible'
                    } catch (Exception e) {
                        echo '‚ö†Ô∏è Java non configur√©, installation automatique...'
                        // Jenkins utilisera l'installation automatique
                    }
                }
            }
        }

        stage('üì• Checkout') {
            steps {
                echo 'üîÑ R√©cup√©ration du code source...'

                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/rijalseydinaissa/jenkins_github_ngrok.git'
                    ]],
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CleanCheckout']
                    ]
                ])

                script {
                    try {
                        env.GIT_COMMIT_MSG = sh(
                            script: 'git log -1 --pretty=%B',
                            returnStdout: true
                        ).trim()

                        env.GIT_COMMIT_SHORT = sh(
                            script: 'git rev-parse --short HEAD',
                            returnStdout: true
                        ).trim()
                    } catch (Exception e) {
                        env.GIT_COMMIT_MSG = "Manual build"
                        env.GIT_COMMIT_SHORT = "manual"
                    }
                }
            }
        }

        stage('üîç Code Analysis') {
            steps {
                echo 'üîç Analyse du code...'
                sh '''
                    echo "=== PROJECT STRUCTURE ==="
                    ls -la
                    echo "=== BUILD INFO ==="
                    echo "Build Number: ${BUILD_NUMBER}"
                    echo "Git Commit: ${GIT_COMMIT_MSG}"
                    echo "Git Short: ${GIT_COMMIT_SHORT}"
                    echo "=========================="
                '''

                // V√©rifier les fichiers essentiels
                script {
                    if (!fileExists('Dockerfile')) {
                        error '‚ùå Dockerfile manquant'
                    }
                    if (!fileExists('pom.xml')) {
                        error '‚ùå pom.xml manquant'
                    }
                    echo '‚úÖ Fichiers de configuration pr√©sents'
                }
            }
        }

        stage('üê≥ Docker Build') {
            steps {
                echo 'üê≥ Construction avec Docker...'
                script {
                    try {
                        // Nettoyage des ressources existantes
                        sh '''
                            echo "üßπ Nettoyage..."
                            docker stop ${CONTAINER_NAME} 2>/dev/null || true
                            docker rm ${CONTAINER_NAME} 2>/dev/null || true
                            docker rmi ${DOCKER_IMAGE} 2>/dev/null || true
                        '''

                        // Build avec Docker (inclut Maven)
                        echo "üî® Construction de l'image Docker (avec build Maven int√©gr√©)..."
                        sh "docker build -t ${DOCKER_IMAGE} ."

                        // V√©rifier l'image
                        sh "docker images | grep ${DOCKER_IMAGE.split(':')[0]}"

                    } catch (Exception e) {
                        error "‚ùå √âchec du build Docker: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('üöÄ Deploy Application') {
            steps {
                echo 'üöÄ D√©ploiement de l\'application...'
                script {
                    try {
                        // D√©marrer le conteneur
                        sh """
                            echo "üöÄ D√©marrage du conteneur..."
                            docker run -d \\
                                --name ${CONTAINER_NAME} \\
                                -p ${APP_PORT}:${APP_PORT} \\
                                --restart unless-stopped \\
                                ${DOCKER_IMAGE}
                        """

                        // V√©rifier le conteneur
                        sh '''
                            echo "üîç V√©rification du conteneur..."
                            docker ps | grep ${CONTAINER_NAME}
                        '''

                        // Health check robuste
                        sh '''
                            echo "‚è≥ Test de d√©marrage de l'application..."
                            timeout=120
                            interval=5

                            while [ $timeout -gt 0 ]; do
                                echo "‚è≥ V√©rification... (${timeout}s restantes)"

                                # Essayer plusieurs endpoints
                                if curl -f -m 10 http://localhost:8080/health > /dev/null 2>&1; then
                                    echo "‚úÖ Application pr√™te (endpoint health)!"
                                    curl -s http://localhost:8080/health
                                    break
                                elif curl -f -m 10 http://localhost:8080/ > /dev/null 2>&1; then
                                    echo "‚úÖ Application pr√™te (endpoint racine)!"
                                    break
                                elif curl -f -m 10 http://localhost:8080/actuator/health > /dev/null 2>&1; then
                                    echo "‚úÖ Application pr√™te (actuator health)!"
                                    break
                                fi

                                # Logs de d√©bogage si probl√®me
                                if [ $timeout -le 60 ] && [ $((timeout % 20)) -eq 0 ]; then
                                    echo "üìã Logs du conteneur (derni√®res 5 lignes):"
                                    docker logs ${CONTAINER_NAME} --tail 5 2>/dev/null || true
                                fi

                                sleep $interval
                                timeout=$((timeout-interval))
                            done

                            if [ $timeout -le 0 ]; then
                                echo "‚ùå Timeout: Application non accessible"
                                echo "üìã Logs complets du conteneur:"
                                docker logs ${CONTAINER_NAME} 2>/dev/null || true
                                echo "üìã Statut du conteneur:"
                                docker ps -a | grep ${CONTAINER_NAME} || true
                                exit 1
                            fi
                        '''

                    } catch (Exception e) {
                        echo "‚ùå Erreur de d√©ploiement: ${e.getMessage()}"
                        sh '''
                            echo "üìã Diagnostic d'erreur:"
                            docker logs ${CONTAINER_NAME} 2>/dev/null || echo "Pas de logs disponibles"
                            docker ps -a | grep ${CONTAINER_NAME} || echo "Conteneur non trouv√©"
                        '''
                        throw e
                    }
                }
            }
        }

        stage('üåê Expose with ngrok') {
            steps {
                echo 'üåê Exposition publique via ngrok...'
                script {
                    try {
                        // Nettoyage ngrok
                        sh '''
                            echo "üßπ Arr√™t des processus ngrok existants..."
                            pkill ngrok 2>/dev/null || true
                            sleep 5
                        '''

                        // Configuration ngrok
                        sh '''
                            echo "üîß Configuration ngrok..."
                            ngrok config add-authtoken $NGROK_TOKEN
                        '''

                        // D√©marrage ngrok
                        sh '''
                            echo "üöÄ D√©marrage ngrok..."
                            nohup ngrok http 8080 --log=stdout > ngrok.log 2>&1 &
                            echo "‚è≥ Attente du d√©marrage ngrok..."
                            sleep 15
                        '''

                        // R√©cup√©ration URL avec retry
                        sh '''
                            attempts=0
                            max_attempts=6

                            while [ $attempts -lt $max_attempts ]; do
                                attempts=$((attempts+1))
                                echo "üîç Tentative $attempts/$max_attempts..."

                                # V√©rifier l'API ngrok
                                if ! curl -s http://localhost:4040/api/tunnels >/dev/null 2>&1; then
                                    echo "‚ö†Ô∏è API ngrok non accessible, attente..."
                                    sleep 10
                                    continue
                                fi

                                # R√©cup√©rer l'URL
                                NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"https://[^"]*' | cut -d '"' -f 4 | head -n 1)

                                if [ -n "$NGROK_URL" ]; then
                                    echo "üåê URL publique trouv√©e: $NGROK_URL"

                                    # Test de l'URL
                                    if curl -f -m 30 "$NGROK_URL/" >/dev/null 2>&1; then
                                        echo "‚úÖ URL ngrok fonctionnelle!"
                                        echo "üåê Application accessible: $NGROK_URL"
                                        echo "üîó Endpoints disponibles:"
                                        echo "  - Accueil: $NGROK_URL/"
                                        echo "  - Health: $NGROK_URL/health"
                                        echo "  - Hello: $NGROK_URL/hello/Jenkins"

                                        # Sauvegarder l'URL
                                        echo "$NGROK_URL" > ngrok_url.txt
                                        break
                                    else
                                        echo "‚ö†Ô∏è URL trouv√©e mais non accessible, retry..."
                                    fi
                                else
                                    echo "‚ö†Ô∏è URL non trouv√©e, retry..."
                                fi

                                sleep 10
                            done

                            if [ $attempts -eq $max_attempts ]; then
                                echo "‚ùå Impossible de configurer ngrok"
                                echo "üìã Logs ngrok:"
                                cat ngrok.log 2>/dev/null || echo "Pas de logs"
                                echo "üìã API ngrok:"
                                curl -s http://localhost:4040/api/tunnels 2>/dev/null || echo "API non accessible"
                                exit 1
                            fi
                        '''

                    } catch (Exception e) {
                        echo "‚ùå Erreur ngrok: ${e.getMessage()}"
                        sh '''
                            echo "üìã Diagnostic ngrok:"
                            cat ngrok.log 2>/dev/null || echo "Pas de logs ngrok"
                            ps aux | grep ngrok || echo "Pas de processus ngrok"
                            netstat -tlnp | grep 4040 || echo "Port 4040 non ouvert"
                        '''
                        throw e
                    }
                }
            }
        }

        stage('üß™ Integration Tests') {
            steps {
                echo 'üß™ Tests d\'int√©gration...'
                script {
                    def ngrokUrl = ""
                    try {
                        ngrokUrl = readFile('ngrok_url.txt').trim()
                    } catch (Exception e) {
                        error "‚ùå URL ngrok non disponible pour les tests"
                    }

                    sh """
                        echo "üß™ Tests sur: ${ngrokUrl}"

                        echo "üß™ Test endpoint principal..."
                        curl -f -m 30 "${ngrokUrl}/" -o /dev/null -s || exit 1

                        echo "üß™ Test endpoint hello..."
                        curl -f -m 30 "${ngrokUrl}/hello/CI-CD-Test" -o /dev/null -s || exit 1

                        echo "‚úÖ Tous les tests pass√©s!"
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage final...'
            script {
                // Archiver les logs
                archiveArtifacts(
                    artifacts: '*.log',
                    allowEmptyArchive: true
                )

                // Mettre √† jour la description du build
                try {
                    def ngrokUrl = readFile('ngrok_url.txt').trim()
                    currentBuild.description = "üåê <a href='${ngrokUrl}'>${ngrokUrl}</a>"
                } catch (Exception e) {
                    currentBuild.description = "‚ùå URL non disponible"
                }
            }
        }

        success {
            echo '‚úÖ D√©ploiement r√©ussi!'
            script {
                def ngrokUrl = "Non disponible"
                try {
                    ngrokUrl = readFile('ngrok_url.txt').trim()
                } catch (Exception e) {
                    echo "‚ö†Ô∏è URL ngrok non r√©cup√©rable"
                }

                echo """
==========================================
üéâ D√âPLOIEMENT R√âUSSI!
==========================================
üåê URL publique: ${ngrokUrl}
üì± Endpoints:
   ‚Ä¢ Accueil: ${ngrokUrl}/
   ‚Ä¢ Health: ${ngrokUrl}/health
   ‚Ä¢ Hello: ${ngrokUrl}/hello/World
üíº Build: #${BUILD_NUMBER}
üìù Commit: ${env.GIT_COMMIT_SHORT} - ${env.GIT_COMMIT_MSG}
==========================================
                """
            }
        }

        failure {
            echo '‚ùå D√©ploiement √©chou√©'
            script {
                sh '''
                    echo "=== DIAGNOSTIC D'√âCHEC ==="
                    echo "Conteneurs Docker:"
                    docker ps -a || true
                    echo "Images Docker:"
                    docker images || true
                    echo "Processus:"
                    ps aux | grep -E "(java|ngrok)" || true
                    echo "Ports ouverts:"
                    netstat -tlnp | grep -E "(8080|4040)" || true
                    echo "=========================="
                '''
            }
        }
    }
}