pipeline {
    agent any

    tools {
        maven 'Maven-3.8'
        jdk 'JDK-17'
    }

    environment {
        GITHUB_CREDENTIALS = 'github-credentials'
        APP_NAME = 'my-java-app'
        APP_PORT = '8080'
        NGROK_PORT = '8080'
        DOCKER_IMAGE = 'my-java-app:latest'
        USE_DOCKER = 'false' // Changer √† 'true' pour utiliser Docker
    }

    stages {
        stage('üîç Checkout') {
            steps {
                echo 'üì• R√©cup√©ration du code source...'
                checkout scm
            }
        }

        stage('üßπ Clean') {
            steps {
                echo 'üßπ Nettoyage du workspace...'
                sh 'mvn clean'
            }
        }

        stage('üì¶ Compile') {
            steps {
                echo '‚öôÔ∏è Compilation du projet...'
                sh 'mvn compile'
            }
        }

        stage('üß™ Test') {
            steps {
                echo 'üß™ Ex√©cution des tests unitaires...'
                sh 'mvn test -Dmaven.test.failure.ignore=false'
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'target/surefire-reports',
                        reportFiles: '*.html',
                        reportName: 'Test Report'
                    ])
                }
            }
        }

        stage('üì¶ Package') {
            steps {
                echo 'üì¶ Cr√©ation du package...'
                sh 'mvn package -DskipTests'
            }
        }

        stage('üê≥ Docker Build') {
            when {
                environment name: 'USE_DOCKER', value: 'true'
            }
            steps {
                echo 'üê≥ Construction de l\'image Docker...'
                script {
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('üõë Stop Previous Deployment') {
            steps {
                echo 'üõë Arr√™t de la pr√©c√©dente instance...'
                script {
                    if (env.USE_DOCKER == 'true') {
                        sh '''
                            # Arr√™ter et supprimer les conteneurs Docker existants
                            docker stop my-java-app-container || true
                            docker rm my-java-app-container || true

                            # Tuer ngrok pr√©c√©dent
                            pkill ngrok || true
                            sleep 5
                        '''
                    } else {
                        sh '''
                            # Tuer les processus Java pr√©c√©dents
                            pkill -f "java.*my-java-app" || true
                            # Tuer ngrok pr√©c√©dent
                            pkill ngrok || true
                            sleep 5
                        '''
                    }
                }
            }
        }

        stage('üöÄ Deploy') {
            steps {
                echo 'üöÄ D√©ploiement de l\'application...'
                script {
                    if (env.USE_DOCKER == 'true') {
                        sh '''
                            # D√©ploiement avec Docker
                            docker run -d --name my-java-app-container -p 8080:8080 ${DOCKER_IMAGE}

                            # Attendre que le conteneur d√©marre
                            sleep 20
                        '''
                    } else {
                        sh '''
                            # D√©ploiement traditionnel
                            chmod +x scripts/deploy.sh scripts/start-ngrok.sh
                            ./scripts/deploy.sh
                            sleep 15
                        '''
                    }

                    // Lancer ngrok dans tous les cas
                    sh '''
                        ./scripts/start-ngrok.sh
                        sleep 10
                    '''
                }
            }
        }

        stage('‚úÖ Health Check') {
            steps {
                echo '‚úÖ V√©rification de la sant√© de l\'application...'
                script {
                    sh '''
                        # Test local
                        curl -f http://localhost:8080/health || exit 1

                        # R√©cup√©rer l'URL ngrok
                        NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | python3 -c "
import sys, json
data = json.load(sys.stdin)
for tunnel in data['tunnels']:
    if tunnel['proto'] == 'https':
        print(tunnel['public_url'])
        break
" 2>/dev/null || echo "URL ngrok non disponible")

                        echo "üåê Application disponible localement : http://localhost:8080"
                        echo "üåç Application disponible publiquement : $NGROK_URL"

                        # Test de l'URL publique si disponible
                        if [ "$NGROK_URL" != "URL ngrok non disponible" ]; then
                            curl -f "$NGROK_URL/health" || echo "‚ö†Ô∏è  URL publique non accessible imm√©diatement"
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'üìä Archivage des artefacts...'
            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true, allowEmptyArchive: true

            echo 'üßπ Nettoyage...'
            cleanWs()
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s !'
        }
        failure {
            echo '‚ùå √âchec du pipeline'
        }
    }
}